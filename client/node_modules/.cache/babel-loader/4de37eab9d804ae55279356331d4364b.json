{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/budget/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport BudgetInput from './BudgetInput';\nimport BudgetList from './BudgetList';\nimport Balance from './Balance';\nimport Reset from './Reset';\nimport Signin from './Signin';\nimport Register from './Register';\nimport NavBar from './NavBar';\nimport './App.css';\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState([{\n    amount: null,\n    description: '',\n    type: null\n  }]);\n  const [route, setRoute] = useState('signin');\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [signedInUserID, setSignedInUserID] = useState(null); //setting user id piece of state to the id of the signed in user\n\n  const loadUser = id => {\n    setSignedInUserID(id);\n    fetchExistingData(id);\n  }; //displaying any pre-existing data for the signed in user\n\n\n  const fetchExistingData = async () => {\n    let initialData = await fetch(`http://localhost:3001/${signedInUserID}`);\n    initialData = await initialData.json();\n    initialData = initialData.map(({\n      amount,\n      description,\n      type,\n      date\n    }) => ({\n      amount: parseFloat(amount),\n      description,\n      type,\n      date\n    }));\n    setData(initialData);\n  }; //fetching updated data after submitting new transaction\n\n\n  const fetchTransactions = async (amount, description, type, date) => {\n    let response = await fetch('http://localhost:3001/submit', {\n      method: 'put',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount,\n        description: description,\n        type: type,\n        date: date,\n        user_id: signedInUserID\n      })\n    });\n    response = await response.json();\n    response = response.map(({\n      amount,\n      description,\n      type,\n      date\n    }) => ({\n      amount: parseFloat(amount),\n      description,\n      type,\n      date\n    }));\n    setData(response);\n  }; //clearing database after hitting reset\n\n\n  const onReset = async () => {\n    await fetch('http://localhost:3001/reset', {\n      method: 'put',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: signedInUserID\n      })\n    });\n    setData([{\n      amount: null,\n      description: '',\n      type: null,\n      date: ''\n    }]);\n  }; //deleting desired transaction from databse\n\n\n  const onDelete = async (amount, description, type, date) => {\n    let newData = await fetch('http://localhost:3001/delete', {\n      method: 'put',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount,\n        description: description,\n        type: type,\n        date: date,\n        user_id: signedInUserID\n      })\n    });\n    newData = await newData.json();\n\n    if (newData.length === 0) {\n      setData([{\n        amount: null,\n        description: '',\n        type: null,\n        date: ''\n      }]);\n    } else {\n      newData = newData.map(({\n        amount,\n        description,\n        type,\n        date\n      }) => ({\n        amount: parseFloat(amount),\n        description,\n        type,\n        date\n      }));\n      setData(newData);\n    }\n  };\n\n  const onRouteChange = route => {\n    if (route === 'home') {\n      setIsSignedIn(true);\n    } else {\n      setIsSignedIn(false);\n    }\n\n    setRoute(route);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      onRouteChange: onRouteChange,\n      isSignedIn: isSignedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 4\n    }, this), route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n      loadUser: loadUser,\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 6\n    }, this) : route === 'register' ? /*#__PURE__*/_jsxDEV(Register, {\n      loadUser: loadUser,\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 6\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"budget-input\",\n        className: \"ui container\",\n        children: /*#__PURE__*/_jsxDEV(BudgetInput, {\n          onSubmit: fetchTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"reset-button\",\n        className: \"ui container\",\n        children: /*#__PURE__*/_jsxDEV(Reset, {\n          onReset: onReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(BudgetList, {\n        data: data,\n        onDelete: onDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Balance, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this); // return (\n  // \t<div>\n  // \t\t<div id=\"budget-input\" className=\"ui container\">\n  // \t\t\t<BudgetInput onSubmit={fetchTransactions} />\n  // \t\t</div>\n  // \t\t<div id=\"reset-button\" className=\"ui container\">\n  // \t\t\t<Reset onReset={onReset} />\n  // \t\t</div>\n  // \t\t<BudgetList data={data} onDelete={onDelete}/> \n  // \t\t<Balance data={data}/> \n  // \t</div>\n  // );\n};\n\n_s(App, \"aVjsB+doNr430/5GL8yN8/G9MQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/budget/src/components/App.js"],"names":["React","useState","useEffect","BudgetInput","BudgetList","Balance","Reset","Signin","Register","NavBar","App","data","setData","amount","description","type","route","setRoute","isSignedIn","setIsSignedIn","signedInUserID","setSignedInUserID","loadUser","id","fetchExistingData","initialData","fetch","json","map","date","parseFloat","fetchTransactions","response","method","headers","body","JSON","stringify","user_id","onReset","onDelete","newData","length","onRouteChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BudgetInput from './BudgetInput';\nimport BudgetList from './BudgetList';\nimport Balance from './Balance';\nimport Reset from './Reset';\nimport Signin from './Signin';\nimport Register from './Register';\nimport NavBar from './NavBar';\nimport './App.css';\n\nconst App = () => {\n\n\tconst [data, setData] = useState([{ amount: null, description: '', type: null}]);\n\tconst [route, setRoute] = useState('signin');\n\tconst [isSignedIn, setIsSignedIn] = useState(false);\n\tconst [signedInUserID, setSignedInUserID] = useState(null);\n\n\t//setting user id piece of state to the id of the signed in user\n\tconst loadUser = id => {\n\t\tsetSignedInUserID(id);\n\t\tfetchExistingData(id);\n\t}\n\n\t//displaying any pre-existing data for the signed in user\n\tconst fetchExistingData = async () => {\n\t\tlet initialData = await fetch(`http://localhost:3001/${signedInUserID}`)\n\t\tinitialData = await initialData.json();\n\t\tinitialData = initialData.map(({amount, description, type, date}) => ({amount: parseFloat(amount), description, type, date}));\n\t\tsetData(initialData);\n\t}\n\n\n\t//fetching updated data after submitting new transaction\n\tconst fetchTransactions = async (amount, description, type, date) => {\n\t\tlet response = await fetch('http://localhost:3001/submit', {\n\t\t\tmethod: 'put',\n\t\t\theaders: { 'Content-type': 'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tamount: amount,\n\t\t\t\tdescription: description,\n\t\t\t\ttype: type,\n\t\t\t\tdate: date,\n\t\t\t\tuser_id: signedInUserID\n\t\t\t})\n\t\t})\n\t\tresponse = await response.json();\n\t\tresponse = response.map(({amount, description, type, date}) => ({amount: parseFloat(amount), description, type, date}));\n\t\tsetData(response);\n\t}\n\n\t//clearing database after hitting reset\n\tconst onReset = async () => {\n\t\tawait fetch('http://localhost:3001/reset', {\n\t\t\tmethod: 'put',\n\t\t\theaders: { 'Content-type': 'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tuser_id: signedInUserID\n\t\t\t})\n\t\t})\n\t\tsetData([{ amount: null, description: '', type: null, date: ''}]);\n\t}\n\n\t//deleting desired transaction from databse\n\tconst onDelete = async (amount, description, type, date) => {\n\t\tlet newData = await fetch('http://localhost:3001/delete', {\n\t\t\tmethod: 'put',\n\t\t\theaders: { 'Content-type': 'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tamount: amount,\n\t\t\t\tdescription: description,\n\t\t\t\ttype: type,\n\t\t\t\tdate: date,\n\t\t\t\tuser_id: signedInUserID\n\t\t\t})\n\t\t})\n\t\tnewData = await newData.json();\n\t\tif (newData.length === 0) {\n\t\t\tsetData([{ amount: null, description: '', type: null, date: ''}]);\n\t\t} else {\n\t\t\tnewData = newData.map(({amount, description, type, date}) => ({amount: parseFloat(amount), description, type, date}));\n\t\t\tsetData(newData);\n\t\t}\n\t}\n\n\tconst onRouteChange = (route) => {\n\t\tif (route === 'home') {\n\t\t\tsetIsSignedIn(true);\n\t\t} else {\n\t\t\tsetIsSignedIn(false);\n\t\t}\n\t\tsetRoute(route);\n\t}\n\n\n\treturn (\n\t\t<div>\n\t\t\t<NavBar onRouteChange={onRouteChange} isSignedIn={isSignedIn}/>\n\t\t\t{route === 'signin' \n\t\t\t? <Signin loadUser={loadUser} onRouteChange={onRouteChange}/> : \n\t\t\troute === 'register' \n\t\t\t? <Register loadUser={loadUser} onRouteChange={onRouteChange}/> : (\n\t\t\t\t<div>\n\t\t\t\t\t<div id=\"budget-input\" className=\"ui container\">\n\t\t\t\t\t\t<BudgetInput onSubmit={fetchTransactions} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"reset-button\" className=\"ui container\">\n\t\t\t\t\t\t<Reset onReset={onReset} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<BudgetList data={data} onDelete={onDelete}/> \n\t\t\t\t\t<Balance data={data}/>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\n\t);\n\n\t// return (\n\t// \t<div>\n\t// \t\t<div id=\"budget-input\" className=\"ui container\">\n\t// \t\t\t<BudgetInput onSubmit={fetchTransactions} />\n\t// \t\t</div>\n\t// \t\t<div id=\"reset-button\" className=\"ui container\">\n\t// \t\t\t<Reset onReset={onReset} />\n\t// \t\t</div>\n\t// \t\t<BudgetList data={data} onDelete={onDelete}/> \n\t// \t\t<Balance data={data}/> \n\t// \t</div>\n\n\t// );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}